version: '3.8'

services:
  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - auth-microservice
      - eventos-microservice
      - compras-microservice
    networks:
      - app-network
    restart: always

  # Servicio de Autenticación
  auth-microservice:
    image: carlos0smar/auth-go-service:v3.0
    container_name: auth-service
    ports:
      - "8080:8080"
    environment:
      DB_USER: auth_user
      DB_PASS: auth_password
      DB_HOST: db-auth
      DB_PORT: 3306
      DB_NAME: auth_db
      API_PORT: 8080
      JWT_SECRET: grupo_4_microservicios
    depends_on:
      db-auth:
        condition: service_healthy
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Base de datos para Auth
  db-auth:
    image: mysql:8.0
    container_name: auth-mysql
    restart: always
    environment:
      MYSQL_DATABASE: auth_db
      MYSQL_USER: auth_user
      MYSQL_PASSWORD: auth_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3306:3306"
    volumes:
      - auth_data:/var/lib/mysql
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Servicio de Eventos
  eventos-microservice:
    image: sandravillca7/eventos-rest-rust:latest
    container_name: eventos-service
    restart: unless-stopped
    environment:
      DATABASE_URL: mysql://eventos_user:eventos_password@db-eventos:3306/eventos_db
      RUST_LOG: info
      HOST: 0.0.0.0
      PORT: 3001
      JWT_SECRET: grupo_4_microservicios
    ports:
      - "3001:3001"
    depends_on:
      db-eventos:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos para Eventos
  db-eventos:
    image: mysql:8.0
    container_name: eventos-mysql
    restart: always
    environment:
      MYSQL_DATABASE: eventos_db
      MYSQL_USER: eventos_user
      MYSQL_PASSWORD: eventos_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3307:3306"
    volumes:
      - eventos_data:/var/lib/mysql
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Servicio de Compras
  compras-microservice:
    image: mangodm/servicio-compras-api:v3.0
    container_name: compras-service
    restart: always
    environment:
      DATABASE_URL: mysql+pymysql://compras_user:compras_password@db-compras:3306/compras_db
      RABBITMQ_HOST: rabbitmq
      JWT_SECRET_KEY: grupo_4_microservicios
    ports:
      - "5003:5003"    
    depends_on:
      db-compras:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos para Compras
  db-compras:
    image: mysql:8.0
    container_name: compras-mysql
    restart: always
    environment:
      MYSQL_DATABASE: compras_db
      MYSQL_USER: compras_user
      MYSQL_PASSWORD: compras_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3308:3306"
    volumes:
      - compras_data:/var/lib/mysql
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]      
      timeout: 20s
      retries: 10

  # RabbitMQ para el servicio de Compras y Mensajería
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Puerto AMQP
      - "15672:15672"  # Puerto para la interfaz de administración
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Mensajería (preparado para futura implementación)
  mensajeria-microservice:
    image: simonchumaceroespada/notificaciones-app
    container_name: mensajeria-service
    restart: always
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
    ports:
      - "5004:5004"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  auth_data:
  eventos_data:
  compras_data:
  rabbitmq_data:
